#! /usr/bin/env bash

### NOTE: use git-setup-repos to set up the repos!

errors=0

while getopts "hc" opt
do
    case "$opt" in
        (\?) ((errors++)) ;;
        (h) DO_HELP=1 ;;
        (c) DO_CLEAR=1 ;;
    esac
done

((DO_HELP)) && HELPOUT=/dev/stdout || HELPOUT=/dev/stderr
((DO_HELP || errors)) && {
    cat >$HELPOUT <<EOF
usage: $0 [-ln]

Options
-c      Clears the screen.
-h	Displays this message.
EOF
    exit
}

shift $((OPTIND-1))

((DO_CLEAR)) && clear

if [[ -t 0 ]]; then
    MAGENTA='\033[1;35m'        # Repo doesn't exist or is not a git repo.
    CYAN='\033[1;36m'           # Repo name (and prefix).
    YELLOW='\033[1;33m'         # Repo may need pushed.
    GREEN='\033[1;32m'          # Repo ok.
    RED='\033[1;31m'            # Repo may need checkin.
    BLUE='\033[1;34m'           # Repo needs to pull.
    BRIGHTBLUE='\u001b[34;1m'   # Repo needs to push.
    BRIGHTRED='\u001b[31;1m'    # 
    BRIGHTWHITE='\u001b[37;1m'  # Status didn't match.
    BRIGHTYELLOW='\u001b[33;1m' # Repo diverged.
    INVERSE='\u001b[7m'         # Inverse.
    NC='\033[0m'                # No Color.
fi

time (printf "Start: %s on ${GREEN}${INVERSE}%s${NC}\n" "$(date +'%F %H:%M:%S')" "$(hostname)"
      mygitrepos --directories | while read REPO
      do
          [[ -d $REPO ]] || {
              printf "===> ${MAGENTA}%20s ${CYAN}Repo $REPO$NC\n" "Does not exist!"
              continue
          }
          [[ -d $REPO/.git ]] || {
              printf "===> ${MAGENTA}%20s ${CYAN}Repo $REPO$NC\n" "Not a git repo!"
              continue
          }
          STATUS=$(cd $REPO && git-uptodate)
          case "$STATUS" in
              "Up to date")
                  STATCOLOR="$GREEN"
                  ;;
              "Need to pull")
                  STATCOLOR="$BLUE"
                  ;;
              "Need to push")
                  STATCOLOR="$BRIGHTBLUE"
                  ;;
              "Diverged")
                  STATCOLOR="$BRIGHTYELLOW"
                  ;;
              *)
                  STATCOLOR="$BRIGHTWHITE"
                  ;;
          esac
          printf "===> $STATCOLOR%20s ${CYAN}Repo $REPO$NC\n" "$STATUS"
          STATUS=$(cd $REPO && git status --short)
          [[ -n "$STATUS" ]] && {
              printf "===> ${RED}%20s ${CYAN}Repo $REPO $NC\n" "May need checkin!"
          }
          
      done
      echo "Stop:  $(date +'%F %H:%M:%S')"
     )
