#! /usr/bin/env bash

### NOTE: use git-setup-repos to set up the repos!

errors=0

while getopts "Cchiu" opt
do
    case "$opt" in
        (\?) ((errors++)) ;;
        (C) DO_CREATE=1 ;;
        (c) DO_CLEAR=1 ;;
        (h) DO_HELP=1 ;;
        (i) DO_INTERACTIVE=1 ;;
        (u) DO_UPDATE=1 ;;
    esac
done

((DO_HELP)) && HELPOUT=/dev/stdout || HELPOUT=/dev/stderr
((DO_HELP || errors)) && {
    cat >$HELPOUT <<EOF
usage: $0 [-chiu]

Options
-C      Asks the user if they want to create missing repos.
-c      Clears the screen.
-h	Displays this message.
-i      Asks the user first when updating repos.
-u      Update repos that need pulled.
EOF
    exit
}

shift $((OPTIND-1))

((DO_CLEAR)) && clear

if [[ -t 0 ]]; then
    MAGENTA='\033[1;35m'        # Repo doesn't exist or is not a git repo.
    CYAN='\033[1;36m'           # Repo name (and prefix).
    YELLOW='\033[1;33m'         # Repo may need pushed.
    GREEN='\033[1;32m'          # Repo ok.
    RED='\033[1;31m'            # Repo may need checkin.
    BLUE='\033[1;34m'           # Repo needs to pull.
    BRIGHTBLUE='\u001b[34;1m'   # Repo needs to push.
    BRIGHTRED='\u001b[31;1m'    # 
    BRIGHTWHITE='\u001b[37;1m'  # Status didn't match.
    BRIGHTYELLOW='\u001b[33;1m' # Repo diverged.
    INVERSE='\u001b[7m'         # Inverse.
    NC='\033[0m'                # No Color.
fi

time (printf "Start: %s on ${GREEN}${INVERSE}%s${NC}\n" "$(date +'%F %H:%M:%S')" "$(hostname)"
      mygitrepos --all-columns | while read PRIO INCL DIR REPO
      do
          NEED_TO_PULL=0
          NEED_TO_PUSH=0
          NEED_TO_CREATE=0
          MAY_NEED_CHECKIN=0
          [[ -d $DIR ]] || {
              printf "===> ${MAGENTA}%20s ${CYAN}Repo $DIR$NC\n" "Does not exist!"
              if ((DO_CREATE)); then
                  read -p "Create it? (y/n/q) " ynq </dev/tty
                  [[ $ynq == [Qq]* ]] && {
                      echo 1>&2 "User requested quit, exiting."
                      break
                  }
                  [[ $ynq == [Yy]* ]] && git clone $REPO $DIR
              else 
                  continue
              fi
          }
          [[ -d $DIR/.git ]] || {
              printf "===> ${MAGENTA}%20s ${CYAN}Repo $DIR$NC\n" "Not a git repo!"
              continue
          }
          STATUS=$(cd $DIR && git-uptodate)
          case "$STATUS" in
              "Up to date")
                  STATCOLOR="$GREEN"
                  ;;
              "Need to pull")
                  STATCOLOR="$BLUE"
                  NEED_TO_PULL=1
                  # echo NEED_TO_PULL: $NEED_TO_PULL
                  ;;
              "Need to push")
                  STATCOLOR="$BRIGHTBLUE"
                  NEED_TO_PUSH=1
                  ;;
              "Diverged")
                  STATCOLOR="$BRIGHTYELLOW"
                  ;;
              *)
                  STATCOLOR="$BRIGHTWHITE"
                  ;;
          esac
          printf "===> $STATCOLOR%20s ${CYAN}Repo $DIR$NC\n" "$STATUS"

          STATUS=$(cd $DIR && git status --short)
          [[ -n "$STATUS" ]] && {
              printf "===> ${RED}%20s ${CYAN}Repo $DIR $NC\n" "May need checkin!"
              MAY_NEED_CHECKIN=1
          }

          #echo DO_UPDATE: $DO_UPDATE NEED_TO_PULL: $NEED_TO_PULL MAY_NEED_CHECKIN:$MAY_NEED_CHECKIN
          
          if ((DO_UPDATE && NEED_TO_PULL && ! MAY_NEED_CHECKIN)); then
              if ((DO_INTERACTIVE)); then 
                  read -p "Pull repo? (Y/n)" yn </dev/tty
                  [[ $yn == [Yy]* || -z $yn ]] && DO_PULL=1 || DO_PULL=0
              else
                  DO_PULL=1
              fi
              ((DO_PULL)) && (cd $DIR && git pull)
          fi

          if ((DO_UPDATE && NEED_TO_PUSH && ! MAY_NEED_CHECKIN)); then
              if ((DO_INTERACTIVE)); then 
                  read -p "Push repo? (Y/n)" yn </dev/tty
                  [[ $yn == [Yy]* || -z $yn ]] && DO_PUSH=1 || DO_PUSH=0
              else
                  DO_PUSH=1
              fi
              ((DO_PUSH)) && (cd $DIR && git push)
          fi
      done

      printf "Stop: %s on ${GREEN}${INVERSE}%s${NC}\n" "$(date +'%F %H:%M:%S')" "$(hostname)"
     )
