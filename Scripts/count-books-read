#! /usr/bin/env bash
################################################################################
# The org-mode file in which I keep track of what books I'm reading
# and have read looks like this:
#-------------------------------------------------------------------------------
# * 2022
# ** Read
# *** : Title of Book I Haven't Finished Reading -- https://www.amazon.com/amazon-link-if-it-exists
# ...
# *** 2022-05-21: Title of Book I **Have** Finished Reading -- https://www.amazon.com/amazon-link-if-it-exists
# ...
# *** 2 2023-11-01: Title of Book I **Have** Finished Reading that contains more than one book -- https://www.amazon.com/amazon-link-if-it-exists
# ...
# ** Did not finish
# *** : Title of Book I Won't Finish Reading -- https://www.amazon.com/amazon-link-if-it-exists
# ...
# * 2021
# ...
# * Previously read, sometime
# ** Title of Book I Finished Reading at some indeterminate date in the past -- https://www.amazon.com/amazon-link-if-it-exists
# ...
#-------------------------------------------------------------------------------
PROG_NAME="$0"
READ_FILE=~/Repos/tkb-notes/Books/read.org
YEAR=$(date '+%Y')
F1=cat
F2=cat
F3=cat

let errors=0
while getopts "aly:" opt
do
    case $opt in
        (\?) let errors++ ;;
        (a) ALTFORMAT=1 ;;
        (l) F1="tee $HOME/tmp/Log.cbr1"
            F2="tee $HOME/tmp/Log.cbr2"
            F3="tee $HOME/tmp/Log.cbr3"
            ;;
        (y) YEAR="$OPTARG" ;;
    esac
done

let shift_by=OPTIND-1
shift $shift_by

((errors > 0)) && {
    cat <<EOF
usage: $PROG_NAME [-l] [-a] [-y YYYY] [file]
where
-a        Use alternate output format for year end summaries.
-l        Log intermediate files as ~/tmp/Log.cbr{1,2,3}.
-y YYYY   Year number to calculate for.

Prints the number of books read in the year.
EOF
    exit 2
}

if ((ALTFORMAT)); then ALTFORMAT="$YEAR: "; else ALTFORMAT=""; fi

if [[ -n "$1" ]]; then READ_FILE="$1"; fi
LAST_YEAR=$((YEAR - 1))

sed -E -n "/^\* $YEAR/,/^(\*\* Did not finish|\* $LAST_YEAR)/p" $READ_FILE |
    $F1 | sed -e "/^* $YEAR/,/^** Read/d" \
              -e "/^(\*\* Did not finish|\* $LAST_YEAR)/d" |
    $F2 | sed -E -n "/^\*\*\*[ \t]+([0-9]+[ \t]+){0,1}[0-9]/p" |
    $F3 | gawk -v ALTFORMAT="$ALTFORMAT" '
{
  line_no++
  found = match($0, /\*\*\*[ \t]+(([0-9]+)[ \t]+){0,1}([0-9]+)/, matches)
  if (found) {
      if (matches[2] == "") {
          total++
      } else {
          total += matches[2]
      }
  } else {
      printf "Do not understand line %d: %s\n", line_no, $0 > "/dev/stderr"
  }
}
END {
    printf "%s%d\n", ALTFORMAT, total
}
'
#    cat; exit
