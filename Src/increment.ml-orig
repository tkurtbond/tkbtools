(* increment.ml -- find the first file name in a series that doesn't exist. *)
open Unix
open Printf

let revision_id = "$Id: increment.ml 1.3 Mon, 15 Feb 1999 22:39:46 -0500
tkb $"
let print_revision () = Printf.printf "%s\n" revision_id; exit 0


let set_int nref n = nref := n

let width = ref 0
and start = ref 0

let args = ref ([] : string list)

let left_pad padding n s =
  let l = String.length s in
  if l >= n then
    s
  else begin
    (String.make (n - l) padding) ^ s
  end

let main () =
  let argdefs = [
    ("-w", Arg.Int (set_int width), "width\tWidth of number");
    ("-s", Arg.Int (set_int start), "start\tNumber to start");
    ("-version", Arg.Unit print_revision, "Print version info and exit");
  ]
  and usage = "usage: increment [options] prefix [suffix]" in
  Arg.parse argdefs (function s -> args := !args @ [s]) usage;
  (* Make sure under WNT that we don't end up with CR/LF at the end. *)
  set_binary_mode_out Pervasives.stdout true;
  let (prefix, suffix) =
    match !args with
    | [prefix] -> (prefix, "")
    | [prefix; suffix] -> (prefix, suffix)
    | _ -> Arg.usage argdefs usage; exit 2;
  in
  let make_name n =
    (* O'caml sprintf doesn't allow "%0*d", alas.  *)
    sprintf "%s%s%s" prefix (left_pad '0' !width (string_of_int n)) suffix in
  let n = ref !start and found = ref false in
  while not !found do
    let name = make_name !n in
    try
      ignore (stat name);
      incr n
    with Unix_error (ENOENT, _, _) ->
      found := true;
      print_endline name
    | x -> eprintf "Unexpected error: ";
	raise x;
  done


let _ =
  Printexc.catch main ()
