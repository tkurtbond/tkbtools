(* countdown.ml -- GUI display of counting down time with alarm.  *)

(* Todo:
   * Under 9wm it always goes to the topleft corner of the screen,
     no matter where you place it.
*)

open Tk

let revision_id = "$Id: countdown.ml 1.12 Wed, 03 Apr 2002 20:16:32 -0500 tkb $"
let print_revision () = Printf.printf "%s\n" revision_id; exit 0


let font = "-*-Helvetica-Bold-R-Normal--18-180-*-*-*-*-*-*"

let ne_xbm = "
#define 1-ne-3.xbm_width 32
#define 1-ne-3.xbm_height 32
static unsigned char 1-ne-3.xbm_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
"

let nw_xbm = "
#define 2-nw-3.xbm_width 32
#define 2-nw-3.xbm_height 32
static unsigned char 2-nw-3.xbm_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
"

let sw_xbm = "
#define 3-sw-3.xbm_width 32
#define 3-sw-3.xbm_height 32
static unsigned char 3-sw-3.xbm_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18, 0xf8, 0xff, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
"

let se_xbm = "
#define 4-se-3.xbm_width 32
#define 4-se-3.xbm_height 32
static unsigned char 4-se-3.xbm_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18, 0x18, 0x80, 0x01, 0x18,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f, 0x18, 0x80, 0xff, 0x1f,
   0xf8, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
"

let time_delta = ref 5.0
let dr = Str.regexp "\\([0-9]+\\(\\.[0-9]+\\)?\\)\\([HhMmSs]?\\)"
let set_delta s =
  let rec iter d pos =
    if Str.string_match dr s pos then begin
      let d' = float_of_string (Str.matched_group 1 s) in
      let scale =
	match Str.matched_group 3 s with
	| "" | "S" | "s" -> 1.
	| "H" | "h" -> 3600.
	| "M" | "m" -> 60.
	| _ -> 1.			(* This can't actually happen. *)
      in iter (d +. (d' *. scale)) (Str.group_end 0)
    end else
      time_delta := d
  in iter 0. 0
  


let between_beeps = ref 1
and gaudy = ref true
and now = ref false
and interval = ref 5.0
and label = ref ""
and title = ref ""
and num_beeps = ref 5
and silent = ref false
and update_title = ref false

let set2 a b v = a := v; b := v

let time_of_float f =
  let seconds = mod_float f 60. in
  let f = (f -. seconds) /. 60. in 
  let minutes = mod_float f 60. in
  let f = (f -. minutes) /. 60. in 
  let hours = f in
  (* If you using a floating -interval the text bounces too much using %g. *)
  let ms = Printf.sprintf "%gm %05.2fs" minutes seconds in
  let s = if hours > 0. then Printf.sprintf "%gh %s" hours ms else ms in
  s



let main () =
  let specs = [
    ("-beeps", Arg.Int ((:=) num_beeps),
     "numbeeps\tThe number of times to beep");
    ("-between", Arg.Int ((:=) between_beeps),
     "seconds\tThe number of seconds to sleep between beeps");
    ("-now", Arg.Set now,
     "\tDisplay end announcement now");
    ("-gaudy", Arg.Set gaudy,
     "\tUse gaudy colors to announce completion");
    ("-interval", Arg.Float ((:=) interval),
     "seconds\tThe interval between updates (a float)");
    ("-l", Arg.String ((:=) label),
     "label\tA label to display in the countdown window");
    ("-nogaudy", Arg.Clear gaudy,
     "\tDo not use gaudy colors to announce completion");
    ("-silent", Arg.Set silent,
     "\tDo not ring the bell");
    ("-t", Arg.String ((:=) title),
     "title\tA title to display in the title bar for the window");
    ("-tl", Arg.String (set2 title label),
     "text\tText to display in the title bar and label");
    ("-ut", Arg.Set update_title,
     "\tUpdate the title with the time remaining");
    ("-version", Arg.Unit print_revision, "Print version info and exit");
  ]
  and usage = "usage: countdown [options] time-delta" in
  Arg.parse specs set_delta usage;
  let top = openTk ~clas:"Countdown" () in
  let width = pixels (`Cm 1.0) in 
  let bitmaps = [|Imagebitmap.create ~data:ne_xbm ();
		  Imagebitmap.create ~data:se_xbm ();
		  Imagebitmap.create ~data:sw_xbm ();
		  Imagebitmap.create ~data:nw_xbm ()
		|] in
  let start_time = (time_of_float !time_delta) in 
  let frame = Frame.create top in 
  let displayed_time = Label.create
      ~text:start_time ~font:font ~textwidth:10 ~justify:`Left ~anchor:`W
      ~padx:(pixels (`Mm 4.0))
      frame
  and icon = Button.create
      ~image:bitmaps.(0) ~anchor:`Center ~width:width ~height:width
      ~command:(fun _ -> exit 0) frame in 
  pack ~side:`Right ~fill:`Both [coe displayed_time; coe icon];
  pack [frame];
  if !title = "" then title := "Countdown";
  if !update_title then Wm.title_set top (start_time ^ " - " ^ !title)
  else Wm.title_set top !title;
  if !label <> "" then begin
    let spacer = Canvas.create 
	~height:(pixels (`Mm 2.0)) ~width:(pixels (`Mm 2.0))
	top in
    pack ~side:`Top ~fill:`Both [spacer];
    let user_label = Label.create
	~text:!label ~font:font ~relief:`Groove
	~padx:(pixels (`Mm 2.0)) ~pady:(pixels (`Mm 2.0)) top
    in pack ~side:`Bottom ~fill:`X [user_label]
  end;
  let over = ref false in 
  let rec finish () =
    if not !silent then Bell.ring ();
    decr num_beeps;
    if !num_beeps > 1 then 
      let _ = Timer.add ~ms:(!between_beeps * 1000) ~callback:finish in ()
    else
      over := true
  and flash = 
    let it = ref 0
    and colors = [| `Red; `Green; `Blue; `Yellow |] in
    function () ->
      Toplevel.configure ~background:colors.(!it) top;
      Label.configure ~background:colors.(!it) displayed_time;
      Button.configure ~background:colors.((!it + 1) mod 4) icon;
      it := (!it + 1) mod 4;
      ignore (Timer.add ~ms:(!between_beeps * 100) ~callback:flash)
  and the_end () =
    Tk.raise_window top;
    Label.configure ~text:"Finished!" displayed_time;
    if !update_title then Wm.title_set top ("Finished!" ^ " - " ^ !title);
    if not !silent then Bell.ring ();
    ignore (Timer.add ~ms:(!between_beeps * 1000) ~callback:finish);
    if !gaudy then ignore (Timer.add ~ms:(!between_beeps * 100) ~callback:flash)
  and handle () =
    time_delta := !time_delta -. !interval;
    if !time_delta <= 0.0 then begin 
      the_end ()
    end else begin
      let new_time = (time_of_float !time_delta) in 
      Label.configure ~text:new_time displayed_time;
      if !update_title then Wm.title_set top (new_time ^ " - " ^ !title);
      ignore (Timer.add ~ms:(Stdlib.truncate (!interval *. 1000.0))
                ~callback:handle);
      ()      
    end
  and over_it () =
    Button.configure ~bitmap:(`Predefined "warning") ~anchor:`Center
      ~width:width ~height:width icon;
    Button.configure ~image:(`Bitmap "") ~anchor:`Center
      ~width:width ~height:width icon;
  and switch =
    let it = ref 1 in
    function () ->
      if !over then begin
	over_it ()
      end else begin
	Button.configure ~image:bitmaps.(!it) ~anchor:`Center
				~width:width ~height:width icon;
	it := (!it + 1) mod 4;
	ignore (Timer.add ~ms:500 ~callback:switch)
      end
  in
  if !now then begin
    over_it ();
    the_end ();
  end else begin 
    ignore (Timer.add ~ms:500 ~callback:switch);
    ignore (Timer.add ~ms:(Stdlib.truncate (!interval *. 1000.0))
              ~callback:handle);
  end;
  mainLoop ()

let _ =
  Printexc.print main ()

